declare module '../storage/mongodb.js' {
  import { Connection } from 'mongoose';
  import { Store } from 'express-session';
  
  export class MongoStorage {
    constructor();
    ensureConnection(): Promise<void>;
    getUser(id: string): Promise<any>;
    getUserByUsername(username: string): Promise<any>;
    getUserByEmail(email: string): Promise<any>;
    getUserById(id: string): Promise<any>;
    getAllUsers(): Promise<any[]>;
    createUser(insertUser: any): Promise<any>;
    getHospital(id: string): Promise<any>;
    getAllHospitals(): Promise<any[]>;
    getHospitalsByIds(hospitalIds: string[]): Promise<any[]>;
    getHospitalsForDoctor(doctorId: string): Promise<any[]>;
    getHospitalsByFilters(filters: any): Promise<any[]>;
    createHospital(insertHospital: any): Promise<any>;
    updateHospital(id: string, hospitalUpdate: any): Promise<any>;
    deleteHospital(id: string): Promise<boolean>;
    getDoctor(id: string): Promise<any>;
    getAllDoctors(): Promise<any[]>;
    getDoctorsByHospital(hospitalId: string): Promise<any[]>;
    createDoctor(insertDoctor: any): Promise<any>;
    updateDoctor(id: string, doctorUpdate: any): Promise<any>;
    deleteDoctor(id: string): Promise<boolean>;
    getAppointment(id: string): Promise<any>;
    getUserAppointments(userId: string): Promise<any[]>;
    getAllAppointments(): Promise<any[]>;
    createAppointment(insertAppointment: any): Promise<any>;
    updateAppointmentStatus(id: string, status: string): Promise<any>;
    updateAppointmentNotes(id: string, notes: string): Promise<any>;
    deleteAppointment(id: string): Promise<boolean>;
    getDoctorAppointments(doctorId: string): Promise<any[]>;
    getDoctorPatients(doctorId: string): Promise<any[]>;
    getChatMessages(userId: string): Promise<any[]>;
    createChatMessage(message: any): Promise<any>;
    getFirstAidTip(id: string): Promise<any>;
    getAllFirstAidTips(): Promise<any[]>;
    getFirstAidTipsByCategory(category: string): Promise<any[]>;
    createFirstAidTip(tip: any): Promise<any>;
    getMentalHealthResource(id: string): Promise<any>;
    getAllMentalHealthResources(): Promise<any[]>;
    getMentalHealthResourcesByCategory(category: string): Promise<any[]>;
    createMentalHealthResource(resource: any): Promise<any>;
    createReminder(reminderData: any): Promise<any>;
    getRemindersByAppointment(appointmentId: string): Promise<any[]>;
    getPendingReminders(): Promise<any[]>;
    updateReminderStatus(id: string, status: string, response: any): Promise<any>;
    getSavedHospitals(userId: string): Promise<any[]>;
    saveHospital(userId: string, hospitalId: string): Promise<boolean>;
    removeSavedHospital(userId: string, hospitalId: string): Promise<boolean>;
    searchHospitals(query: string, latitude: number, longitude: number, radius?: number): Promise<any[]>;
    getNearbyHospitals(latitude: number, longitude: number, radius?: number): Promise<any[]>;
    getHospitalsBySpecialtyWithLocation(specialty: string, latitude: number, longitude: number, radius?: number): Promise<any[]>;
    calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number;
    toRad(degrees: number): number;
    getDoctorNotifications(doctorId: string): Promise<any[]>;
    getDoctorMedicalRecords(doctorId: string): Promise<any[]>;
    getDoctorSchedule(doctorId: string): Promise<any>;
    cleanupOrphanedSchedules(): Promise<void>;
    getSchedulesByHospital(hospitalId: string): Promise<any[]>;
    updateDoctorSchedule(doctorId: string, scheduleData: any): Promise<any>;
    getDoctorByUserId(userId: string): Promise<any>;
    getCompletedAppointmentsForFollowUp(): Promise<any[]>;
    getFollowUpAppointment(originalAppointmentId: string): Promise<any>;
    markFollowUpSent(appointmentId: string): Promise<void>;
    createNotification(notification: any): Promise<any>;
    getUserNotifications(userId: string): Promise<any[]>;
    markNotificationAsRead(notificationId: string, userId: string): Promise<void>;
    markAllNotificationsAsRead(userId: string): Promise<void>;
    deleteNotification(notificationId: string, userId: string): Promise<void>;
    deleteAllNotifications(userId: string): Promise<void>;
    getUpcomingAppointments(): Promise<any[]>;
  }
} 